{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///home/user/leangualeap/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///home/user/leangualeap/src/ai/flows/generate-word-options.ts"],"sourcesContent":["\n'use server';\n\n/**\n * @fileOverview Generates contextually relevant but incorrect answer options for vocabulary questions.\n *\n * - generateWordOptions - A function that generates incorrect word options.\n * - GenerateWordOptionsInput - The input type for the generateWordOptions function.\n * - GenerateWordOptionsOutput - The return type for the generateWordOptions function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst GenerateWordOptionsInputSchema = z.object({\n  word: z.string().describe('The vocabulary word for which to generate options.'),\n  definition: z.string().describe('The definition of the vocabulary word.'),\n  explanatoryImage: z\n    .string()\n    .describe(\n      \"A photo of a plant, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'.\"\n    ),\n});\nexport type GenerateWordOptionsInput = z.infer<typeof GenerateWordOptionsInputSchema>;\n\nconst GenerateWordOptionsOutputSchema = z.object({\n  options: z\n    .array(z.string())\n    .length(3)\n    .describe('Three contextually similar but incorrect answer options.'),\n});\nexport type GenerateWordOptionsOutput = z.infer<typeof GenerateWordOptionsOutputSchema>;\n\nconst prompt = ai.definePrompt({\n  name: 'generateWordOptionsPrompt',\n  input: {schema: GenerateWordOptionsInputSchema},\n  output: {schema: GenerateWordOptionsOutputSchema},\n  model: 'googleai/gemini-2.0-flash',\n  prompt: `You are an AI assistant helping teachers create vocabulary quizzes.\n\n  Given a vocabulary word, its definition, and an explanatory image, your task is to generate three incorrect, but contextually relevant, answer options.\n  These options should be plausible enough to challenge students, but definitively wrong. The options should not be simple variations of the correct word.\n\n  Word: {{{word}}}\n  Definition: {{{definition}}}\n  Image: {{media url=explanatoryImage}}\n\n  Generate three incorrect options based on the provided information. Your output must be a JSON object with a single key \"options\" containing an array of three strings.`,\n});\n\nexport async function generateWordOptions(\n  input: GenerateWordOptionsInput\n): Promise<GenerateWordOptionsOutput> {\n  const {output} = await prompt(input);\n  if (!output) {\n    throw new Error('AI failed to generate word options.');\n  }\n  return output;\n}\n"],"names":[],"mappings":";;;;;AAGA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,iCAAiC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9C,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,YAAY,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAChC,kBAAkB,uIAAA,CAAA,IAAC,CAChB,MAAM,GACN,QAAQ,CACP;AAEN;AAGA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,SAAS,uIAAA,CAAA,IAAC,CACP,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IACd,MAAM,CAAC,GACP,QAAQ,CAAC;AACd;AAGA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA8B;IAC9C,QAAQ;QAAC,QAAQ;IAA+B;IAChD,OAAO;IACP,QAAQ,CAAC;;;;;;;;;yKAS8J,CAAC;AAC1K;AAEO,eAAe,oBACpB,KAA+B;IAE/B,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,IAAI,CAAC,QAAQ;QACX,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;;;IARsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 309, "column": 0}, "map": {"version":3,"sources":["file:///home/user/leangualeap/src/lib/actions.ts"],"sourcesContent":["\n'use server';\n\nimport { generateWordOptions } from \"@/ai/flows/generate-word-options\";\nimport { z } from \"zod\";\nimport { redirect } from \"next/navigation\";\n\n// --- WORD ACTIONS ---\n\nconst addWordSchema = z.object({\n  word: z.string().min(1, \"Word is required.\"),\n  definition: z.string().min(1, \"Definition is required.\"),\n  imageDataUri: z.string().min(1, \"Image data is required.\"),\n});\n\n// This action ONLY calls the AI and returns the options.\n// The client is responsible for creating the word and saving it to storage.\nexport async function getAiWordOptions(data: {\n    word: string;\n    definition: string;\n    imageDataUri: string;\n}) {\n    const validatedFields = addWordSchema.safeParse(data);\n\n    if (!validatedFields.success) {\n        const errorMap = validatedFields.error.flatten().fieldErrors;\n        const firstError = Object.values(errorMap)[0]?.[0] || \"Validation failed.\";\n        return {\n            errors: errorMap,\n            message: firstError,\n            success: false,\n            options: null,\n        };\n    }\n  \n    try {\n        const aiResponse = await generateWordOptions({\n            word: data.word,\n            definition: data.definition,\n            explanatoryImage: data.imageDataUri,\n        });\n\n        if (!aiResponse?.options || aiResponse.options.length < 3) {\n            throw new Error(\"AI did not return the expected number of options.\");\n        }\n        \n        return { success: true, options: aiResponse.options, message: \"\" };\n\n    } catch (error) {\n        console.error(\"Error during word option generation:\", error);\n        const errorMessage = \"Failed to add word. The AI could not process the request. Please try a different word or image.\";\n        return { message: errorMessage, success: false, options: null };\n    }\n}\n\n// --- AUTH ACTIONS ---\n\nexport async function redirectToDashboard(userId: string) {\n    redirect(`/dashboard?userId=${userId}`);\n}\n"],"names":[],"mappings":";;;;;;AAGA;AACA;AACA;AAAA;;;;;;;AAEA,uBAAuB;AAEvB,MAAM,gBAAgB,kKAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7B,MAAM,kKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IACxB,YAAY,kKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;IAC9B,cAAc,kKAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;AAClC;AAIO,eAAe,iBAAiB,IAItC;IACG,MAAM,kBAAkB,cAAc,SAAS,CAAC;IAEhD,IAAI,CAAC,gBAAgB,OAAO,EAAE;QAC1B,MAAM,WAAW,gBAAgB,KAAK,CAAC,OAAO,GAAG,WAAW;QAC5D,MAAM,aAAa,OAAO,MAAM,CAAC,SAAS,CAAC,EAAE,EAAE,CAAC,EAAE,IAAI;QACtD,OAAO;YACH,QAAQ;YACR,SAAS;YACT,SAAS;YACT,SAAS;QACb;IACJ;IAEA,IAAI;QACA,MAAM,aAAa,MAAM,CAAA,GAAA,iJAAA,CAAA,sBAAmB,AAAD,EAAE;YACzC,MAAM,KAAK,IAAI;YACf,YAAY,KAAK,UAAU;YAC3B,kBAAkB,KAAK,YAAY;QACvC;QAEA,IAAI,CAAC,YAAY,WAAW,WAAW,OAAO,CAAC,MAAM,GAAG,GAAG;YACvD,MAAM,IAAI,MAAM;QACpB;QAEA,OAAO;YAAE,SAAS;YAAM,SAAS,WAAW,OAAO;YAAE,SAAS;QAAG;IAErE,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,wCAAwC;QACtD,MAAM,eAAe;QACrB,OAAO;YAAE,SAAS;YAAc,SAAS;YAAO,SAAS;QAAK;IAClE;AACJ;AAIO,eAAe,oBAAoB,MAAc;IACpD,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE,CAAC,kBAAkB,EAAE,QAAQ;AAC1C;;;IA1CsB;IAwCA;;AAxCA,+OAAA;AAwCA,+OAAA","debugId":null}},
    {"offset": {"line": 383, "column": 0}, "map": {"version":3,"sources":["file:///home/user/leangualeap/.next-internal/server/app/dashboard/add-word/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {getAiWordOptions as '4077c729c5f7059c5c0cc11636fa71a1257edbc9bf'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 441, "column": 0}, "map": {"version":3,"sources":["file:///home/user/leangualeap/src/app/dashboard/add-word/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/add-word/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/add-word/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAuS,GACpU,qEACA","debugId":null}},
    {"offset": {"line": 455, "column": 0}, "map": {"version":3,"sources":["file:///home/user/leangualeap/src/app/dashboard/add-word/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/add-word/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/add-word/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAmR,GAChT,iDACA","debugId":null}},
    {"offset": {"line": 469, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}